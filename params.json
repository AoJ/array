{"name":"array.js","tagline":"A better array for the browser and node.js.","body":"# array\r\n\r\nA better array for the browser and node.js. Supports events & many functional goodies.\r\n\r\nThe functional bits are based on the [Enumerable](https://github.com/component/enumerable) component.\r\n\r\n## Installation\r\n\r\n### Node.js\r\n\r\n    npm install array.js\r\n\r\n### Browser with component\r\n\r\n    component install matthewmueller/array\r\n\r\n### Browser (standalone, amd, etc.)\r\n\r\n* Development (24k): [dist/array.js](https://raw.github.com/MatthewMueller/array/master/dist/array.js)\r\n* Production (4k w/ gzip): [dist/array.js](https://raw.github.com/MatthewMueller/array/master/dist/array.min.js)\r\n\r\n## Examples\r\n\r\n### Events:\r\n\r\n```js\r\nusers.on('add', function(user) {\r\n  console.log('added ', user);\r\n});\r\n\r\nusers.on('remove', function(user) {\r\n  console.log('removed ', user);\r\n});\r\n\r\nusers.push(user);\r\nusers.splice(0, 3, user);\r\n```\r\n\r\n### Iteration:\r\n\r\n```js\r\nusers\r\n  .map('friends')\r\n  .select('age > 20')\r\n  .map('name.first')\r\n  .select(/^T/)\r\n```\r\n\r\n```js\r\nfruits.find({ name : 'apple' }).color\r\n```\r\n\r\n## Design\r\n\r\nThis library uses an array-like object to implement all it's methods. This is very similar to how jQuery lets you do: `$('.modal')[0]` and `$('p').length`.\r\n\r\nOne caveat with working with array-like objects is that you cannot manually set array indexes because the length value will not be updated. You will have to use the mutator methods provided like push, pop, etc.\r\n\r\nThis library differs from `component/enumerable` in that it has events and does not wrap the array. To access the actual array in enumerable you had to call `.value()`. You can treat `array`, just like an array, because it implements all the same methods.\r\n\r\n## Events\r\n\r\n* `add` (item, ...) - emitted when items are added to the array (push, unshift, splice)\r\n* `remove` (item, ...) - emitted when items are removed from the array (pop, shift, splice)\r\n\r\n## API\r\n\r\n#### `array(mixed)`\r\n\r\nInitialize an `array`.\r\n\r\nAs an empty array:\r\n\r\n    var arr = array();\r\n\r\nAs an array with values:\r\n\r\n    var arr = array([1, 2, 3, 4]);\r\n\r\n### Array methods\r\n\r\n`array` implements all the same methods as a native array. For more information, visit [MDN](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array).\r\n\r\n#### Mutators:\r\n\r\nMutator methods that modify the array will emit \"add\" and \"remove\" events.\r\n\r\n* `pop()`: Removes the last element from an array and returns that element.\r\n* `push(item, ...)`: Adds one or more elements to the end of an array and returns the new length of the array.\r\n* `reverse()`: Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\r\n* `shift()`: Removes the first element from an array and returns that element.\r\n* `sort()`: Sorts the elements of an array.\r\n* `splice(i, k, [item, ...])`: Adds and/or removes elements from an array.\r\n* `unshift(item, ...)`: Adds one or more elements to the front of an array and returns the new length of the array.\r\n\r\n#### Accessors:\r\n\r\n* `concat(arr)`: Returns a new array comprised of this array joined with other array(s) and/or value(s).\r\n* `join(str)`: Joins all elements of an array into a string.\r\n* `slice(i, k)`: Extracts a section of an array and returns a new array.\r\n* `toString()`: Returns a string representing the array and its elements. Overrides the Object.prototype.toString method.\r\n* `lastIndexOf(item)`: Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\r\n\r\n### Iteration Methods:\r\n\r\n`array` iteration methods implements most of the methods of [component/enumerable](https://github.com/component/enumerable). The documentation below was originally written by [visionmedia](https://github.com/visionmedia).\r\n\r\n#### `.each(fn)`\r\n\r\n  Iterate each value and invoke `fn(val, i)`.\r\n\r\n```js\r\n users.each(function(val, i){\r\n\r\n })\r\n```\r\n\r\n#### `.map(fn|str)`\r\n\r\n  Map each return value from `fn(val, i)`.\r\n\r\n  Passing a callback function:\r\n\r\n```js\r\n users.map(function(user){\r\n   return user.name.first\r\n })\r\n```\r\n\r\n\r\n  Passing a property string:\r\n\r\n```js\r\n users.map('name.first')\r\n```\r\n\r\n#### `.select(fn|str)`\r\n\r\n  Select all values that return a truthy value of `fn(val, i)`. The argument passed in can either be a function or a string.\r\n\r\n```js\r\n users.select(function(user){\r\n   return user.age > 20\r\n })\r\n```\r\n\r\n  With a property:\r\n\r\n```js\r\n items.select('complete')\r\n```\r\n\r\n  With a condition:\r\n\r\n```js\r\n  users.select('age > 20')\r\n```\r\n\r\n#### `.unique()`\r\n\r\n  Select all unique values.\r\n\r\n```js\r\n nums.unique()\r\n```\r\n\r\n#### `.reject(fn|str|mixed)`\r\n\r\n  Reject all values that return a truthy value of `fn(val, i)`.\r\n\r\n  Rejecting using a callback:\r\n\r\n```js\r\n users.reject(function(user){\r\n   return user.age < 20\r\n })\r\n```\r\n\r\n\r\n  Rejecting with a property:\r\n\r\n```js\r\n items.reject('complete')\r\n```\r\n\r\n\r\n  Rejecting values via `==`:\r\n\r\n```js\r\n data.reject(null)\r\n users.reject(toni)\r\n```\r\n\r\n#### `.compact()`\r\n\r\n  Reject `null` and `undefined`.\r\n\r\n```js\r\n [1, null, 5, undefined].compact()\r\n // => [1,5]\r\n```\r\n\r\n#### `.find(fn)`\r\n\r\n  Return the first value when `fn(val, i)` is truthy,\r\n  otherwise return `undefined`.\r\n\r\n```js\r\n users.find(function(user){\r\n   return user.role == 'admin'\r\n })\r\n```\r\n\r\n#### `.findLast(fn)`\r\n\r\n  Return the last value when `fn(val, i)` is truthy,\r\n  otherwise return `undefined`.\r\n\r\n```js\r\n users.findLast(function(user){\r\n   return user.role == 'admin'\r\n })\r\n```\r\n\r\n#### `.none(fn|str)`\r\n\r\n  Assert that none of the invocations of `fn(val, i)` are truthy.\r\n\r\n  For example ensuring that no pets are admins:\r\n\r\n```js\r\n pets.none(function(p){ return p.admin })\r\n pets.none('admin')\r\n```\r\n\r\n#### `.any(fn)`\r\n\r\n  Assert that at least one invocation of `fn(val, i)` is truthy.\r\n\r\n  For example checking to see if any pets are ferrets:\r\n\r\n```js\r\n pets.any(function(pet){\r\n   return pet.species == 'ferret'\r\n })\r\n```\r\n\r\n#### `.count(fn)`\r\n\r\n  Count the number of times `fn(val, i)` returns true.\r\n\r\n```js\r\n var n = pets.count(function(pet){\r\n   return pet.species == 'ferret'\r\n })\r\n```\r\n\r\n#### `.indexOf(mixed)`\r\n\r\n  Determine the indexof `mixed` or return `-1`.\r\n\r\n#### `.has(mixed)`\r\n\r\n  Check if `mixed` is present in this enumerable.\r\n\r\n#### `.reduce(fn, mixed)`\r\n\r\n  Reduce with `fn(accumulator, val, i)` using\r\n  optional `init` value defaulting to the first\r\n  enumerable value.\r\n\r\n#### `.max(fn|str)`\r\n\r\n  Determine the max value.\r\n\r\n  With a callback function:\r\n\r\n```js\r\n pets.max(function(pet){\r\n   return pet.age\r\n })\r\n```\r\n\r\n\r\n  With property strings:\r\n\r\n```js\r\n pets.max('age')\r\n```\r\n\r\n\r\n  With immediate values:\r\n\r\n```js\r\n nums.max()\r\n```\r\n\r\n#### `.sum(fn|str)`\r\n\r\n  Determine the sum.\r\n\r\n  With a callback function:\r\n\r\n```js\r\n pets.sum(function(pet){\r\n   return pet.age\r\n })\r\n```\r\n\r\n\r\n  With property strings:\r\n\r\n```js\r\n pets.sum('age')\r\n```\r\n\r\n\r\n  With immediate values:\r\n\r\n```js\r\n nums.sum()\r\n```\r\n\r\n#### `.first([mixed])`\r\n\r\n  Return the first value, or first `n` values. If you pass in an object or a function, first will call `find(fn)`.\r\n\r\n#### `.last([mixed])`\r\n\r\n  Return the last value, or last `n` values.\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Matt Mueller <mattmuelle@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-10351690-7","note":"Don't delete this file! It's used internally to help with page regeneration."}